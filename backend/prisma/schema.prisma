generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("POSTGRESQL_URL")
}

model User {
    id               String            @unique @default(uuid()) @db.Uuid
    // IEFT defined the email theorical limit to 254 bytes.
    email            String            @unique @db.VarChar(254)
    hashedPassword   String            @map("hashed_password") @db.VarChar(255)
    firstname        String            @db.VarChar(255)
    lastname         String            @db.VarChar(255)
    isAdmin          Boolean           @default(false) @map("is_admin")
    oauthCredentials OAuthCredential[]
    areas            Area[]

    @@map("users")
}

model OAuthCredential {
    id                        Int                         @id @default(autoincrement())
    accessToken               String                      @unique @map("access_token")
    refreshToken              String                      @unique @map("refresh_token")
    expiresAt                 DateTime                    @map("expires_at") @db.Timestamp()
    scopes                    String[]
    revokeUrl                 String                      @map("revoke_url")
    tokenUrl                  String                      @map("token_url")
    User                      User                        @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId                    String                      @map("users_id") @db.Uuid
    AreaServiceAuthentication AreaServiceAuthentication[]

    @@map("oauth_credentials")
}

enum AreaStatus {
    RUNNING
    STOPPED
    ERROR

    @@map("area_status")
}

model AreaServiceAuthentication {
    id              Int              @id @default(autoincrement())
    apiKey          String?          @map("api_key")
    oauthCredential OAuthCredential? @relation(fields: [oauth], references: [id], onDelete: Cascade)
    oauth           Int?             @map("oauth")
    webhook         String?
    Action          Area[]           @relation(name: "actionAuth")
    Reaction        Area[]           @relation(name: "reactionAuth")

    @@map("area_service_authentications")
}

model Area {
    id          String @unique @default(uuid()) @db.Uuid
    name        String @db.VarChar(255)
    description String @db.Text

    actionId     String                     @map("action_id") @db.VarChar(255)
    actionAuth   AreaServiceAuthentication? @relation(name: "actionAuth", fields: [actionAuthId], references: [id], onDelete: Cascade)
    actionAuthId Int?                       @map("action_auth_id")

    reactionId     String                     @map("reaction_id") @db.VarChar(255)
    reactionBody   Json?                      @map("reaction_body")
    reactionAuth   AreaServiceAuthentication? @relation(name: "reactionAuth", fields: [reactionAuthId], references: [id], onDelete: Cascade)
    reactionAuthId Int?                       @map("reaction_auth_id")

    delay  Int
    status AreaStatus @default(STOPPED)

    user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String? @map("user_id") @db.Uuid

    @@map("areas")
}

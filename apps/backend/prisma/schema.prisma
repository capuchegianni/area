generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("POSTGRESQL_URL")
}

model User {
    id               String            @unique @default(uuid()) @db.Uuid
    // IEFT defined the email theorical limit to 254 bytes.
    email            String            @unique @db.VarChar(254)
    hashedPassword   String            @map("hashed_password") @db.VarChar(255)
    firstname        String            @db.VarChar(255)
    lastname         String            @db.VarChar(255)
    isAdmin          Boolean           @default(false) @map("is_admin")
    oauthCredentials OAuthCredential[]
    areas            Area[]

    @@map("users")
}

model OAuthCredential {
    id                        Int                         @id @default(autoincrement())
    accessToken               String                      @unique @map("access_token")
    refreshToken              String                      @unique @map("refresh_token")
    expiresAt                 DateTime                    @map("expires_at") @db.Timestamp()
    scopes                    String[]
    revokeUrl                 String                      @map("revoke_url")
    tokenUrl                  String                      @map("token_url")
    User                      User                        @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId                    String                      @map("users_id") @db.Uuid

    @@map("oauth_credentials")
    AreaAction Area[] @relation(name: "actionOAuth")
    AreaReaction Area[] @relation(name: "reactionOAuth")
}

enum AreaStatus {
    RUNNING
    STOPPED
    ERROR

    @@map("area_status")
}

model Area {
    id          String @unique @default(uuid()) @db.Uuid
    name        String @db.VarChar(255)
    description String @db.Text

    actionId     String                     @map("action_id") @db.VarChar(255)
    actionOAuth   OAuthCredential @relation(name: "actionOAuth", fields: [actionOAuthId], references: [id], onDelete: Cascade)
    actionOAuthId Int                       @map("action_oauth_id")

    reactionId     String                     @map("reaction_id") @db.VarChar(255)
    reactionBody   Json?                      @map("reaction_body")
    reactionOAuth   OAuthCredential @relation(name: "reactionOAuth", fields: [reactionOAuthId], references: [id], onDelete: Cascade)
    reactionOAuthId Int                       @map("reaction_oauth_id")

    delay  Int
    status AreaStatus @default(STOPPED)

    user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String? @map("user_id") @db.Uuid

    @@map("areas")
}

services:
  postgres:
    image: postgres:12.20-alpine3.20
    container_name: area-postgres
    shm_size: 128mb
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - area-postgres-volume:/var/lib/postgresql/data:rw
    ports:
      - "5432:5432"
    networks:
      - area-network

  redis:
    image: redis:alpine3.20
    restart: unless-stopped
    container_name: area-redis
    env_file:
      - .env
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    volumes:
      - area-redis-volume:/data:rw
    networks:
      - area-network
    command: redis-server --save 60 1 --loglevel warning

  server:
    build:
      context: ./
      dockerfile: ./apps/backend/Dockerfile
    depends_on:
      - postgres
      - redis
    image: area-backend:latest
    container_name: area-backend-api
    env_file:
      - .env
    ports:
      - 8080:${REST_API_PORT}
    volumes:
      - ./crypto/jwe_public_key.pem:${JWE_PUBLIC_KEY}:ro
      - ./crypto/jwe_private_key.pem:${JWE_PRIVATE_KEY}:ro
    networks:
      - area-network

  client_mobile:
    build:
      context: ./
      dockerfile: ./apps/mobile/Dockerfile
    image: area-mobile:latest
    environment:
      - EXPO_PUBLIC_API_URL=${MOBILE_API_URL}
      - EXPO_USE_METRO_WORKSPACE_ROOT=1
      - EXPO_PUBLIC_NODE_ENV=production
    env_file:
      - .env
    volumes:
      - area-client:/app/apps/frontend

  client_web:
    build:
      context: ./
      dockerfile: ./apps/frontend/Dockerfile
    depends_on:
      - server
      - client_mobile
    image: area-frontend:latest
    environment:
      - PORT=${FRONTEND_PORT}
      - API_URL=http://server:${REST_API_PORT}
    env_file:
      - .env
    ports:
      - "8081:${FRONTEND_PORT}"
    volumes:
      - area-client:/app/apps/frontend
    networks:
      - area-network

volumes:
  area-postgres-volume:
  area-redis-volume:
  area-client:

networks:
  area-network:
